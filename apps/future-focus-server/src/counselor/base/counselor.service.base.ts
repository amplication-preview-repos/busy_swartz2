/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Counselor as PrismaCounselor,
  ChatSession as PrismaChatSession,
} from "@prisma/client";

export class CounselorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CounselorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.counselor.count(args);
  }

  async counselors(
    args: Prisma.CounselorFindManyArgs
  ): Promise<PrismaCounselor[]> {
    return this.prisma.counselor.findMany(args);
  }
  async counselor(
    args: Prisma.CounselorFindUniqueArgs
  ): Promise<PrismaCounselor | null> {
    return this.prisma.counselor.findUnique(args);
  }
  async createCounselor(
    args: Prisma.CounselorCreateArgs
  ): Promise<PrismaCounselor> {
    return this.prisma.counselor.create(args);
  }
  async updateCounselor(
    args: Prisma.CounselorUpdateArgs
  ): Promise<PrismaCounselor> {
    return this.prisma.counselor.update(args);
  }
  async deleteCounselor(
    args: Prisma.CounselorDeleteArgs
  ): Promise<PrismaCounselor> {
    return this.prisma.counselor.delete(args);
  }

  async findChatSessions(
    parentId: string,
    args: Prisma.ChatSessionFindManyArgs
  ): Promise<PrismaChatSession[]> {
    return this.prisma.counselor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chatSessions(args);
  }
}
