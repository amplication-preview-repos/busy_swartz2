/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CounselorService } from "../counselor.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CounselorCreateInput } from "./CounselorCreateInput";
import { Counselor } from "./Counselor";
import { CounselorFindManyArgs } from "./CounselorFindManyArgs";
import { CounselorWhereUniqueInput } from "./CounselorWhereUniqueInput";
import { CounselorUpdateInput } from "./CounselorUpdateInput";
import { ChatSessionFindManyArgs } from "../../chatSession/base/ChatSessionFindManyArgs";
import { ChatSession } from "../../chatSession/base/ChatSession";
import { ChatSessionWhereUniqueInput } from "../../chatSession/base/ChatSessionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CounselorControllerBase {
  constructor(
    protected readonly service: CounselorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Counselor })
  @nestAccessControl.UseRoles({
    resource: "Counselor",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCounselor(
    @common.Body() data: CounselorCreateInput
  ): Promise<Counselor> {
    return await this.service.createCounselor({
      data: data,
      select: {
        createdAt: true,
        expertise: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Counselor] })
  @ApiNestedQuery(CounselorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Counselor",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async counselors(@common.Req() request: Request): Promise<Counselor[]> {
    const args = plainToClass(CounselorFindManyArgs, request.query);
    return this.service.counselors({
      ...args,
      select: {
        createdAt: true,
        expertise: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Counselor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Counselor",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async counselor(
    @common.Param() params: CounselorWhereUniqueInput
  ): Promise<Counselor | null> {
    const result = await this.service.counselor({
      where: params,
      select: {
        createdAt: true,
        expertise: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Counselor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Counselor",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCounselor(
    @common.Param() params: CounselorWhereUniqueInput,
    @common.Body() data: CounselorUpdateInput
  ): Promise<Counselor | null> {
    try {
      return await this.service.updateCounselor({
        where: params,
        data: data,
        select: {
          createdAt: true,
          expertise: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Counselor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Counselor",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCounselor(
    @common.Param() params: CounselorWhereUniqueInput
  ): Promise<Counselor | null> {
    try {
      return await this.service.deleteCounselor({
        where: params,
        select: {
          createdAt: true,
          expertise: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/chatSessions")
  @ApiNestedQuery(ChatSessionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "read",
    possession: "any",
  })
  async findChatSessions(
    @common.Req() request: Request,
    @common.Param() params: CounselorWhereUniqueInput
  ): Promise<ChatSession[]> {
    const query = plainToClass(ChatSessionFindManyArgs, request.query);
    const results = await this.service.findChatSessions(params.id, {
      ...query,
      select: {
        chatContent: true,

        counselor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        sessionId: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatSessions")
  @nestAccessControl.UseRoles({
    resource: "Counselor",
    action: "update",
    possession: "any",
  })
  async connectChatSessions(
    @common.Param() params: CounselorWhereUniqueInput,
    @common.Body() body: ChatSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatSessions: {
        connect: body,
      },
    };
    await this.service.updateCounselor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatSessions")
  @nestAccessControl.UseRoles({
    resource: "Counselor",
    action: "update",
    possession: "any",
  })
  async updateChatSessions(
    @common.Param() params: CounselorWhereUniqueInput,
    @common.Body() body: ChatSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatSessions: {
        set: body,
      },
    };
    await this.service.updateCounselor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatSessions")
  @nestAccessControl.UseRoles({
    resource: "Counselor",
    action: "update",
    possession: "any",
  })
  async disconnectChatSessions(
    @common.Param() params: CounselorWhereUniqueInput,
    @common.Body() body: ChatSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatSessions: {
        disconnect: body,
      },
    };
    await this.service.updateCounselor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
