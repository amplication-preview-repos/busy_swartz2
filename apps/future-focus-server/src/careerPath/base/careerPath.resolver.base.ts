/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CareerPath } from "./CareerPath";
import { CareerPathCountArgs } from "./CareerPathCountArgs";
import { CareerPathFindManyArgs } from "./CareerPathFindManyArgs";
import { CareerPathFindUniqueArgs } from "./CareerPathFindUniqueArgs";
import { CreateCareerPathArgs } from "./CreateCareerPathArgs";
import { UpdateCareerPathArgs } from "./UpdateCareerPathArgs";
import { DeleteCareerPathArgs } from "./DeleteCareerPathArgs";
import { CareerPathService } from "../careerPath.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CareerPath)
export class CareerPathResolverBase {
  constructor(
    protected readonly service: CareerPathService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CareerPath",
    action: "read",
    possession: "any",
  })
  async _careerPathsMeta(
    @graphql.Args() args: CareerPathCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CareerPath])
  @nestAccessControl.UseRoles({
    resource: "CareerPath",
    action: "read",
    possession: "any",
  })
  async careerPaths(
    @graphql.Args() args: CareerPathFindManyArgs
  ): Promise<CareerPath[]> {
    return this.service.careerPaths(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CareerPath, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CareerPath",
    action: "read",
    possession: "own",
  })
  async careerPath(
    @graphql.Args() args: CareerPathFindUniqueArgs
  ): Promise<CareerPath | null> {
    const result = await this.service.careerPath(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CareerPath)
  @nestAccessControl.UseRoles({
    resource: "CareerPath",
    action: "create",
    possession: "any",
  })
  async createCareerPath(
    @graphql.Args() args: CreateCareerPathArgs
  ): Promise<CareerPath> {
    return await this.service.createCareerPath({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CareerPath)
  @nestAccessControl.UseRoles({
    resource: "CareerPath",
    action: "update",
    possession: "any",
  })
  async updateCareerPath(
    @graphql.Args() args: UpdateCareerPathArgs
  ): Promise<CareerPath | null> {
    try {
      return await this.service.updateCareerPath({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CareerPath)
  @nestAccessControl.UseRoles({
    resource: "CareerPath",
    action: "delete",
    possession: "any",
  })
  async deleteCareerPath(
    @graphql.Args() args: DeleteCareerPathArgs
  ): Promise<CareerPath | null> {
    try {
      return await this.service.deleteCareerPath(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
