/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AptitudeTest } from "./AptitudeTest";
import { AptitudeTestCountArgs } from "./AptitudeTestCountArgs";
import { AptitudeTestFindManyArgs } from "./AptitudeTestFindManyArgs";
import { AptitudeTestFindUniqueArgs } from "./AptitudeTestFindUniqueArgs";
import { CreateAptitudeTestArgs } from "./CreateAptitudeTestArgs";
import { UpdateAptitudeTestArgs } from "./UpdateAptitudeTestArgs";
import { DeleteAptitudeTestArgs } from "./DeleteAptitudeTestArgs";
import { AptitudeTestService } from "../aptitudeTest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AptitudeTest)
export class AptitudeTestResolverBase {
  constructor(
    protected readonly service: AptitudeTestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AptitudeTest",
    action: "read",
    possession: "any",
  })
  async _aptitudeTestsMeta(
    @graphql.Args() args: AptitudeTestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AptitudeTest])
  @nestAccessControl.UseRoles({
    resource: "AptitudeTest",
    action: "read",
    possession: "any",
  })
  async aptitudeTests(
    @graphql.Args() args: AptitudeTestFindManyArgs
  ): Promise<AptitudeTest[]> {
    return this.service.aptitudeTests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AptitudeTest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AptitudeTest",
    action: "read",
    possession: "own",
  })
  async aptitudeTest(
    @graphql.Args() args: AptitudeTestFindUniqueArgs
  ): Promise<AptitudeTest | null> {
    const result = await this.service.aptitudeTest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AptitudeTest)
  @nestAccessControl.UseRoles({
    resource: "AptitudeTest",
    action: "create",
    possession: "any",
  })
  async createAptitudeTest(
    @graphql.Args() args: CreateAptitudeTestArgs
  ): Promise<AptitudeTest> {
    return await this.service.createAptitudeTest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AptitudeTest)
  @nestAccessControl.UseRoles({
    resource: "AptitudeTest",
    action: "update",
    possession: "any",
  })
  async updateAptitudeTest(
    @graphql.Args() args: UpdateAptitudeTestArgs
  ): Promise<AptitudeTest | null> {
    try {
      return await this.service.updateAptitudeTest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AptitudeTest)
  @nestAccessControl.UseRoles({
    resource: "AptitudeTest",
    action: "delete",
    possession: "any",
  })
  async deleteAptitudeTest(
    @graphql.Args() args: DeleteAptitudeTestArgs
  ): Promise<AptitudeTest | null> {
    try {
      return await this.service.deleteAptitudeTest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
